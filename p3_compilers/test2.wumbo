// Checking normal inputs (bool, int, string, etc..)
int a; 
int b; 
int c; 
void d;
bool e; 
bool f;
bool g;
// Checking struct without body
struct b c;
struct xyz;
// Checking struct with body
struct def {
    int b;
    struct a b;
    void a;
    int d;
    bool f;
};
// Checking function call with no body
void testFunc () {
}
// Checking function call with body
void testFunc2 () {
    int var1;
    int var2;
    bool x;
}
// Checking function with inputs
void testFunc3 (int param1, int param2, int param 3) {
    //  Checking if else statement with while
    if((param1 != (200))) { 
        a = ((param1 + (param2 * 3)) - param3);
        b = (a/2);
        while(b > 50) {
            b = ((a / 4) - 1;
        }
    }
    else {
        a = 30;
        b = 10;
    }
}
//Checking function with declaration, increment/decrment, literals, read/write, if/else, and func calls
void testFunc4 () { 
    int x = 10;
    int y = 8;
    a--; 
    a++:
    a.b = (b + c + 1);
    cin >> a;
    cout << b.c;
    cin >> b.c;
    cout << a.c;
    if ((!b)) {
        void a;
        bool h; 
        b = (x / (y + 3));
        b = b/2;
        a = c = (((((a <= b) && ((!a) >= b))) || ((a == b)) || (!(a != b))) || ((c + (a * b)) - (((f / e) * k) / (!g))));
    }
    if ((((b < 10) || ((b <= 10) && (b > 5))) || (b >= 10))) {
        void a;
        bool h; 
        b = (x / (y + 3));
        b = b/2;
    }
    else{
        repeat(x) {
            int z;
            z = (b + 3);
        }
        return z;
    }
    z();
    z((2 + 2), 10, x);
    if ((b == 10)) {
        e = true;
        f = false;
        a = (-24);
    }
    return;
}
//checks boolean values
bool testFunc5 () { 
    g = (a + b > 1);
    g = (a + b < 1);
    g = (a + b>= 1);
    g = (a + b <= 1);
    g = (a + b == c);
    g = (a + b != c);
    g = (a + b + 2);
    g = (a + b / 2);
    g = (a + b * 2);
    g = (a + b - 2);
    g = (a + b && c);
}
//Checks a main method and while
int main () {
    cin >> n;
    int num1;
    int num2;
    while(true) {
        z.first = num1;
        z = min(x, p);
    }
}
